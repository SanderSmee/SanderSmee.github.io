<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Groovy Programmer</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thoughts.tostring.blog/"/>
  <updated>2019-01-15T15:32:30.607Z</updated>
  <id>http://thoughts.tostring.blog/</id>
  
  <author>
    <name>Sander Smeman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Reduce the code to noise ratio of maven POMs</title>
    <link href="http://thoughts.tostring.blog/2018/10/reduce-code-noise-ratio-maven-poms/"/>
    <id>http://thoughts.tostring.blog/2018/10/reduce-code-noise-ratio-maven-poms/</id>
    <published>2018-10-28T23:00:00.000Z</published>
    <updated>2019-01-15T15:32:30.607Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>I really like maven for the structured way it provides for defining and building a project.But sometimes I wish for a less verbose notation than the XML of the Project Object Model (POM).For example, gradles dependency notation is far shorter than mavens dependency declaration.</p></div><div class="paragraph"><p>Looking for a less verbose way to declare a maven POM, I discovered <a href="https://github.com/takari/polyglot-maven" target="_blank" rel="noopener">polyglot maven</a>.It are maven extensions that allow the maven POM to eb written in another dialect than XML.Since you see YAML more and more I decided to try that dialect, and see if my maven descriptor would be clearer.</p></div><div class="paragraph"><p>The minimum version of maven this works on, is maven 3.3.1. Since that version it&#8217;s possible to provide per project configuration. or extension of maven.</p></div><div class="olist arabic"><ol class="arabic"><li><p>Create a directory to work in, <code>{projectdir}</code>, and change into it.</p></li><li><p>To register the extensions for maven, create a file <code>{projectdir}/.mvn/extensions.xml</code> and add the extension:</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;extensions&gt;    &lt;extension&gt;        &lt;groupId&gt;io.takari.polyglot&lt;/groupId&gt;        &lt;artifactId&gt;polyglot-yaml&lt;/artifactId&gt;        &lt;version&gt;0.3.1&lt;/version&gt;    &lt;/extension&gt;&lt;/extensions&gt;</code></pre></div></div></li><li><p>Now it&#8217;s possible to write the maven POM in YAML, <code>pom.yml</code>:</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml">modelVersion: 4.0.0groupId: demo.maven.polyglotartifactId: yml-demoversion: 1.0-SNAPSHOTname: 'YAML Demo'dependencies:- { groupId: org.junit.jupiter, artifactId: junit-jupiter, version: 5.3.1, scope: test }plugins:- artifactId: maven-compiler-plugin    version: 3.8.0    configuration:    source: 1.8    target: 1.8- artifactId: maven-surefire-plugin    version: 2.22.1</code></pre></div></div><div class="paragraph"><p>By using the yaml inline map. or dictionary notation declaring a dependency uses way less characters then when using XML.</p></div></li></ol></div><div class="sect1"><h2>Limitations</h2><div class="sectionbody"><div class="paragraph"><p>Although this looks great, there are some limitations to using maven polyglot.Mixing different dialects is not possible, and plugins depending on the XML format will not work with another dialect.I also could not get a multi module project working with polyglot yaml.</p></div></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I really like maven for the structured way it provides for defining and building a project.
But sometimes I wish 
      
    
    </summary>
    
      <category term="programming" scheme="http://thoughts.tostring.blog/category/programming/"/>
    
    
      <category term="maven" scheme="http://thoughts.tostring.blog/tags/maven/"/>
    
      <category term="yaml" scheme="http://thoughts.tostring.blog/tags/yaml/"/>
    
  </entry>
  
  <entry>
    <title>Easily build your own tech radar</title>
    <link href="http://thoughts.tostring.blog/2018/10/easily-build-your-own-tech-radar/"/>
    <id>http://thoughts.tostring.blog/2018/10/easily-build-your-own-tech-radar/</id>
    <published>2018-10-14T22:00:00.000Z</published>
    <updated>2019-01-15T15:32:30.607Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>The <a href="https://www.thoughtworks.com/radar" target="_blank" rel="noopener">Thoughtworks Technology Radar</a> is well known for showing technology trends and choices.For my project I wanted to have the same thing, not use the hosted public version from Thoughtworks, but a selfhosted option.Therefore I choose to base it on the Zalando opensource tech radar, and create a way to use a CSV file as input so updating would be an easy thing to do.</p></div><div class="paragraph"><p>To accomplish that I took the following steps:</p></div><div class="olist arabic"><ol class="arabic"><li><p>Create a folder to put the tech radar into: <code>${project-folder}</code>.</p></li><li><p>Start with the <a href="https://html5boilerplate.com" target="_blank" rel="noopener">HTML5 Boilerplate</a> index.html file, and put it into <code>${project-folder}</code>.</p></li><li><p>Insert the snippets as documented at <a href="https://github.com/zalando/tech-radar" target="_blank" rel="noopener">Zalando Tech Radar</a>, with one adjustment.I don&#8217;t fill the <code>entries</code> array with entries, but will do that later on, from the input in the CSV file.</p></li><li><p>Create a CSV file (<code>${project-folder}/data.csv</code>) as input for the tech radar.It has columns for the ring and quadrant where a technology should be put, and an indicator for movement.The names of the rings and quadrant should equal those in the configuration copied from the Zalando example.If you changed them, use those names instead.The movement indicator is (up, none, down) and in the next step translated in to value understood by the radar.The CSV will be translated into entries for the radar.</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-csv hljs" data-lang="csv">name,ring,quadrant,moved,linkJava,INNER,Bottom Right,none,../docs/java.htmlTypescript,SECOND,Top Left,up,../docs/typescript.html</code></pre></div></div></li><li><p>Add the following D3.js library to parse CSV:</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-html hljs" data-lang="html">&lt;script src="https://d3js.org/d3-dsv.v1.min.js"&gt;&lt;/script&gt;</code></pre></div></div><div class="paragraph"><p>This library provides functions to parse CSV file(s) into a map structure per row in the file.</p></div></li><li><p>Create a function to transform a row in the CSV into an entry for the tech radar:</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-javascript hljs" data-lang="javascript">function toEntry(row) {    return {        label: row.name,        quadrant: ['Bottom Right', 'Bottom Left', 'Top Left', 'Top Right'].indexOf(row.quadrant),        ring: ['INNER', 'SECOND', 'THIRD', 'OUTER'].indexOf(row.ring),        link: row.link,        moved: ['down', 'none', 'up'].indexOf(row.moved) - 1,        active: true    }}</code></pre></div></div></li><li><p>This is the diversion from the steps in the Zalando tech radar description.Wrap the <code>radar_visualization()</code> function a custom one, that takes an array of entry, to render the transformed rows, e.g. <code>draw_radar(entries)</code>.</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-javascript hljs" data-lang="javascript">function draw_radar(my_entries) {    radar_visualization({        ...        entries: my_entries    });}</code></pre></div></div></li><li><p>Finally glue everything together to fetch the CSV, parse and transform it, and draw the entries.The code below uses the functions I defined in the previous steps</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-javascript hljs" data-lang="javascript">fetch('./data.csv')    .then(function (resp) {        return resp.text();    })    .then(function (csv) {        var entries = d3.csvParse(csv, function (row) {            return toEntry(row);        });        draw_radar(entries);    });</code></pre></div></div></li></ol></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.thoughtworks.com/radar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Thoughtworks Technology Radar&lt;/a&gt;
      
    
    </summary>
    
      <category term="documentation" scheme="http://thoughts.tostring.blog/category/documentation/"/>
    
    
      <category term="architecture" scheme="http://thoughts.tostring.blog/tags/architecture/"/>
    
  </entry>
  
  <entry>
    <title>Plantuml labels like swagger-ui</title>
    <link href="http://thoughts.tostring.blog/2018/09/plantuml-swagger/"/>
    <id>http://thoughts.tostring.blog/2018/09/plantuml-swagger/</id>
    <published>2018-09-15T22:00:00.000Z</published>
    <updated>2019-01-15T15:32:30.607Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>It&#8217;s great to have <a href="&lt;!--￼2-&#8594;&lt;!--￼0-&#8594;">Asciidoc labels like swagger-ui</a> in the documentation, but would it be possible to extend this even further?In asciidoc documentation I also use <a href="http://plantuml.com/" target="_blank" rel="noopener">Plantuml</a> diagrams, e.g. to illustrate the sequence of interaction between microservices.Is it possible to label those interactions like swagger-ui, just as I now can in asciidoc?</p></div><div class="paragraph"><p>In Plantuml it&#8217;s possible to declare macros.I created a reusable macro for a message in a sequence diagram, that has a note next to it.By giving the note a stereotype it can have custom styling in the diagram, and can look like a label.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-plantuml hljs" data-lang="plantuml">@startuml!definelong Request(verb, msg, desc)msg : descrnote &lt;&lt;verb&gt;&gt;&lt;&lt;HTTP&gt;&gt; left color""verb""end note!enddefinelong!define GET(msg, desc) Request(" GET ", msg, desc)!define POST(msg, desc) Request(" POST ", msg, desc)!define PUT(msg, desc) Request(" PUT ", msg, desc)actor UserUser --&gt; Browser : click resourceGET(Browser --&gt; Resource, /path/to/resource)Browser &lt;-- Resource : responsePOST(Browser -&gt; Resource, '""JSON"" new Resource')note right  more note to  this messageend noteUser &lt;-- Browser : display resource@enduml</code></pre></div></div><div class="paragraph"><p>To give the note a style resembling a label I used the following styling.First some generic styling for each label, based on the <code><a href="#HTTP">[HTTP]</a></code> stereotype.Specific styling for a verb goes through its own <code><a href="#verb">[verb]</a></code> stereotype.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-plantuml hljs" data-lang="plantuml">skinparam note&lt;&lt;HTTP&gt;&gt; {  textAlignment center  backgroundColor #darkgrey  borderColor transparent  fontName monospaced  fontColor #fff  shadowing false}skinparam noteBackgroundColor&lt;&lt;GET&gt;&gt; #61affeskinparam noteBackgroundColor&lt;&lt;POST&gt;&gt; #49cc90skinparam noteBackgroundColor&lt;&lt;PUT&gt;&gt; #fca130skinparam noteBackgroundColor&lt;&lt;DELETE&gt;&gt; #f93e3eskinparam noteBackgroundColor&lt;&lt;HEAD&gt;&gt; #9012feskinparam noteBackgroundColor&lt;&lt;OPTIONS&gt;&gt; #0d5aa7skinparam noteBackgroundColor&lt;&lt;PATCH&gt;&gt; #50e3c2</code></pre></div></div><div class="paragraph"><p>The following results in this diagram:</p></div><div class="imageblock"><div class="content"><img src="<a>assets/img/posts/plantuml-httplabels.png</a>" alt="Plantuml with httplabels"></div></div><div class="quoteblock"><blockquote><div class="paragraph"><p>Written with Plantuml 1.2018.10</p></div></blockquote></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s great to have &lt;a href=&quot;&amp;lt;!--￼2-&amp;#8594;&amp;lt;!--￼0-&amp;#8594;&quot;&gt;Asciidoc labels like swagger-ui&lt;/a&gt; in the 
      
    
    </summary>
    
      <category term="documentation" scheme="http://thoughts.tostring.blog/category/documentation/"/>
    
    
      <category term="asciidoc" scheme="http://thoughts.tostring.blog/tags/asciidoc/"/>
    
      <category term="swagger-ui" scheme="http://thoughts.tostring.blog/tags/swagger-ui/"/>
    
      <category term="plantuml" scheme="http://thoughts.tostring.blog/tags/plantuml/"/>
    
  </entry>
  
  <entry>
    <title>Asciidoc labels like swagger-ui</title>
    <link href="http://thoughts.tostring.blog/2018/09/asciidoc-swagger/"/>
    <id>http://thoughts.tostring.blog/2018/09/asciidoc-swagger/</id>
    <published>2018-09-14T18:00:00.000Z</published>
    <updated>2019-01-15T15:32:30.607Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>If you&#8217;re building a rest api with spring-boot and want to document the api, you have two good options to do this; <a href="http://springfox.github.io/springfox/" target="_blank" rel="noopener">Springfox</a>, or <a href="https://spring.io/projects/spring-restdocs" target="_blank" rel="noopener">Spring REST Docs</a>.Springfox creates (interactive) documentation through a swagger-ui to use by a developer, Spring REST Docs creates documentation via asciidoc.And what&#8217;s best is that you can simply combine the two in a project.</p></div><div class="paragraph"><p>I wanted to create some connection or similarity between the swagger-ui and asciidoc documentation.I came across a <a href="http://mrhaki.blogspot.com/2018/09/awesome-asciidoctor-document-attributes.html" target="_blank" rel="noopener">blogpost by mrhaki</a> that inspired me to extend the snippets in his example.</p></div><div class="paragraph"><p>Using the following snippets, it&#8217;s possible to label HTTP verbs in the Spring REST Docs in the same colors as in the swagger-ui.</p></div><div class="listingblock"><div class="title">Listing 1. Asciidoc variables</div><div class="content"><pre class="highlightjs highlight"><code class="language-asciidoc hljs" data-lang="asciidoc">= Attributes with HTTP labels// Include contents of docinfo.html in HTML head with CSS style definitions:docinfo1:// Document attributes with styling:http-get: pass:quotes[[.http.get]#GET#]:http-post: pass:quotes[[.http.post]#POST#]:http-put: pass:quotes[[.http.put]#PUT#]// More can be added for the other HTTP verbs== Sample section=== {http-get} Request=== {http-post} Create resource=== {http-put} Modify resource</code></pre></div></div><div class="paragraph"><p>Below is the <code>docinfo.html</code> with the CSS style definitions.It contains colors for all verbs, corresponding to the default swagger-ui colors.</p></div><div class="listingblock"><div class="title">Listing 2. docinfo.html file</div><div class="content"><pre class="highlightjs highlight"><code class="language-html hljs" data-lang="html">&lt;style&gt;.http {    color: #fff;    background-color: beige;    padding: .1em .6em;    font-size: .75em;    font-weight: 700;    text-transform: uppercase;    border-radius: .25em;}.http.get  {background-color: #61affe;}.http.post {background-color: #49cc90;}.http.put  {background-color: #fca130;}.http.delete {background-color: #f93e3e;}.http.head {background-color: #9012fe;}.http.options {background-color: #0d5aa7;}.http.patch {background-color: #50e3c2;}&lt;/style&gt;</code></pre></div></div><div class="paragraph"><p>This gives the following result in the Spring REST Docs output.</p></div><div class="imageblock"><div class="content"><img src="<a>assets/img/posts/asciidoc-httplabels.png</a>" alt="Asciidoc with httplabels"></div></div><div class="quoteblock"><blockquote><div class="paragraph"><p>Written with Asciidoc 1.5.6</p></div></blockquote></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re building a rest api with spring-boot and want to document the api, you have two good options to d
      
    
    </summary>
    
      <category term="documentation" scheme="http://thoughts.tostring.blog/category/documentation/"/>
    
    
      <category term="asciidoc" scheme="http://thoughts.tostring.blog/tags/asciidoc/"/>
    
      <category term="swagger-ui" scheme="http://thoughts.tostring.blog/tags/swagger-ui/"/>
    
  </entry>
  
  <entry>
    <title>Combining Spock 1.2 and Junit 5 tests</title>
    <link href="http://thoughts.tostring.blog/2018/09/spock-jupiter/"/>
    <id>http://thoughts.tostring.blog/2018/09/spock-jupiter/</id>
    <published>2018-09-05T22:00:00.000Z</published>
    <updated>2019-01-15T15:32:30.607Z</updated>
    
    <content type="html"><![CDATA[<div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">2018-10-01: Update for Spock 1.2 release</td></tr></table></div><div class="paragraph"><p>Great projects keep moving forward. <a href="https://junit.org/junit5/" target="_blank" rel="noopener">JUnit5</a> is available since september 2017 and <a href="http://spockframework.org" target="_blank" rel="noopener">Spock</a> 1.2 was completed in september 2018.Since Spock is based on junit4, I wondered what it would take to use Spock 1.2 together with JUnit5.</p></div><div class="paragraph"><p>As it turns out, it&#8217;s quite easy to make that happen. JUnit5 comes with a <em>vintage</em> engine to run junit4 based tests. If that is available on the test classpath, your Spock tests run like on junit4.</p></div><div class="paragraph"><p>The following example is based on gradle, and is the minimum for getting started in gradle. It declares the dependencies and instructs gradle to use the JUnit5 <code>JUnitPlatform</code> to execute the tests.</p></div><div class="paragraph"><p>I have a <a href="http://github.com/sandersmee/spock-jupiter" target="_blank" rel="noopener">sample repository</a> that includes a maven <code>pom.xml</code>. The repository also includes a JUnit5 test, to prove that a combination of JUnit5 and Spock tests can exist in the same project.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">plugins {  id 'java'  id 'groovy'}repositories {  mavenCentral()}sourceCompatibility = 1.8dependencies {  testCompile "org.spockframework:spock-core:1.2-groovy-2.5"  implementation "org.junit.jupiter:junit-jupiter-api:5.3.0"  testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.3.0"}test {  useJUnitPlatform()}</code></pre></div></div><div class="quoteblock"><blockquote><div class="paragraph"><p>Written with Spock 1.2, JUnit 5.3.0, and Gradle 4.10</p></div></blockquote></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
2018-
      
    
    </summary>
    
      <category term="programming" scheme="http://thoughts.tostring.blog/category/programming/"/>
    
    
      <category term="junit" scheme="http://thoughts.tostring.blog/tags/junit/"/>
    
      <category term="spock" scheme="http://thoughts.tostring.blog/tags/spock/"/>
    
      <category term="gradle" scheme="http://thoughts.tostring.blog/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Loading DBUnit data in a Spring TestExecutionListener</title>
    <link href="http://thoughts.tostring.blog/2014/12/spring-testexecutionlistener-dbunit/"/>
    <id>http://thoughts.tostring.blog/2014/12/spring-testexecutionlistener-dbunit/</id>
    <published>2014-12-31T23:00:00.000Z</published>
    <updated>2019-01-15T15:32:30.607Z</updated>
    
    <content type="html"><![CDATA[<p>You can use Spring <code>TestExecutionListener</code> to load DBUnit data per test class.</p><p><a href="http://www.insaneprogramming.be/blog/2011/11/22/having-fun-json-dbunit-continued/" title="Having Fun With JSON and DbUnit, Continued" target="_blank" rel="noopener">Lieven Doclo</a> and <a href="http://danhaywood.com/2011/12/20/db-unit-testing-with-dbunit-json-hsqldb-and-junit-rules/" title="DB unit testing with dbUnit, JSON, HSQLDB and JUnit Rules" target="_blank" rel="noopener">Dan Haywood</a> have shown how to make it easier to use DBUnit to load data in unittests. Their solutions uses a junit <code>@Rule</code>, which - by the mechanics of JUnit - is executed before each testmethod in a testclass. There’s also <a href="https://springtestdbunit.github.io/spring-test-dbunit/" title="Spring Test DBUnit" target="_blank" rel="noopener">the project Spring test DBUnit</a> executes loading data per testcase.</p><p>Our requirement was loading a dataset before each testclass, as we’re using springs <code>AbstractSpringTransactionalJUnit4Test</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A TestExecutionListener which enables per-testclass data set loading using DbUnit. This listener is meant to be</span></span><br><span class="line"><span class="comment"> * used in a Spring context, requesting a DataSource from the testclass. Therefore the testclass must implement the</span></span><br><span class="line"><span class="comment"> * DataSourceProvider interface.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This rule supports Spring-style resource urls (classpath:/..., file:/...) and is capable of handling</span></span><br><span class="line"><span class="comment"> * multiple CSV and Flat XML DbUnit data set files (auto-detected by extension).</span></span><br><span class="line"><span class="comment"> * The data sets are automatically reordered so that foreign keys are resolved correctly when loading</span></span><br><span class="line"><span class="comment"> * the data set.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> DataSourceProvider</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lieven DOCLO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dan HAYWOOD</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sander SMEMAN</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUnitLoaderTestExecutionListener</span> <span class="keyword">extends</span> <span class="title">AbstractTestExecutionListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line">    <span class="keyword">private</span> IDatabaseTester databaseTester;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; currentClass = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTestClass</span><span class="params">(<span class="keyword">final</span> TestContext testContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (databaseTester != <span class="keyword">null</span>) &#123;</span><br><span class="line">            databaseTester.onTearDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepareTestInstance</span><span class="params">(<span class="keyword">final</span> TestContext testContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!testContext.getTestClass().equals(currentClass)) &#123;</span><br><span class="line">            Object testInstance = testContext.getTestInstance();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (testInstance <span class="keyword">instanceof</span> DataSourceProvider) &#123;</span><br><span class="line">                dataSource = ((DataSourceProvider) testInstance).getDataSource();</span><br><span class="line">            &#125;</span><br><span class="line">            resourceLoader = testContext.getApplicationContext();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Data data = testContext.getTestClass().getAnnotation(Data.class);</span><br><span class="line">                <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    databaseTester = <span class="keyword">new</span> DataSourceDatabaseTester(dataSource);</span><br><span class="line">                    databaseTester.setSetUpOperation(DatabaseOperation.CLEAN_INSERT);</span><br><span class="line"></span><br><span class="line">                    FlatXmlDataSetBuilder builder = <span class="keyword">new</span> FlatXmlDataSetBuilder();</span><br><span class="line">                    builder.setColumnSensing(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">                    String[] dataSetFiles = data.resources();</span><br><span class="line">                    List&lt;IDataSet&gt; dataSets = <span class="keyword">new</span> ArrayList&lt;IDataSet&gt;(dataSetFiles.length);</span><br><span class="line">                    <span class="keyword">for</span> (String dataSetFile : dataSetFiles) &#123;</span><br><span class="line">                        IDataSet ds;</span><br><span class="line">                        <span class="keyword">if</span> (dataSetFile.endsWith(<span class="string">".xml"</span>)) &#123;</span><br><span class="line">                            ds = builder.build(resourceLoader.getResource(dataSetFile).getInputStream());</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dataSetFile.endsWith(<span class="string">".csv"</span>)) &#123;</span><br><span class="line">                            ds = <span class="keyword">new</span> CsvDataSet(resourceLoader.getResource(dataSetFile).getFile());</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                                    <span class="string">"DbUnitRule only supports JSON, CSV or Flat XML data sets for the moment"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        dataSets.add(ds);</span><br><span class="line">                    &#125;</span><br><span class="line">                    CompositeDataSet dataSet = <span class="keyword">new</span> CompositeDataSet(dataSets.toArray(<span class="keyword">new</span> IDataSet[dataSets.size()]));</span><br><span class="line"></span><br><span class="line">                    ReplacementDataSet filteredDataSet = <span class="keyword">new</span> ReplacementDataSet(dataSet);</span><br><span class="line">                    filteredDataSet.addReplacementObject(<span class="string">"[NULL]"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                    databaseTester.setDataSet(filteredDataSet);</span><br><span class="line">                    databaseTester.onSetup();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                currentClass = testContext.getTestClass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This requires the testclass to implement the DataSourceProvider interface.</p><p>Note that if you’re using <code>AbstractSpringTransactionalJUnit4Test</code> that that class gets a <code>DataSource</code> injected, but it is not an attribute of that class. You have to override the <code>void setDataSource(DataSource ds)</code> method and keep a reference to the provided datasource.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataSourceProvider</span> </span>&#123;</span><br><span class="line">    <span class="function">DataSource <span class="title">getDataSource</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;You can use Spring &lt;code&gt;TestExecutionListener&lt;/code&gt; to load DBUnit data per test class.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.insaneprogramming.be
      
    
    </summary>
    
      <category term="programming" scheme="http://thoughts.tostring.blog/category/programming/"/>
    
    
      <category term="spring" scheme="http://thoughts.tostring.blog/tags/spring/"/>
    
      <category term="dbunit" scheme="http://thoughts.tostring.blog/tags/dbunit/"/>
    
  </entry>
  
</feed>
